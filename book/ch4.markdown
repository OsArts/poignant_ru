% Душевный Учебник по Руби — Глава 4
% Why the lucky stiff; Andrei Volkov (translator)

Глава 4. Листики кода кружат на ветру
=======================================================
![o](images/chapter.poignant.guide-4.jpg)\ 

![Глубоко–глубоко в Пещерах Амбрэ, жил–был Эльф Сколбасой](images/the.elf-1.png) ![и чёрный кот по кличке Негыр](images/the.elf-2.png) Вообще–то, мы как–раз к Эльфу и пришли, он будет играть важную роль в сегодняшнем уроке. (Кстати, первый раз слышу про разумную колбасу — я думал они только на сковородках шкварчать умеют.)

Девочки, у нас будет посетитель, просьба выглядеть прилично (вот ты, пожалуйста, одень юбку, а не эти ужасные колготы со штрипками!)

А теперь, давайте все вместе поздороваемся с Эльфом Амвросьевичем.

> Здравствуйте Эльф Амвросьевич!!!

Сразу предупреждаю: этот урок более нудный; наберись терпения. Мы будем проходить самую важную часть Руби — принципы программирования.
Я понимаю, тебе хочется поскорее начать писать программы, но без понимания этих принципов выучить Руби невозможно.
Зато когда ты их поймешь, всё остальное будет легко и просто, а главное красиво. Руби будет греть тебе сердце, как мягкий пуховый спальник.




## 1. Шелковичный Листик как символ статуса в Гадюшнике


Эльф Амвросьевич, расскажите пожалуйста нашим ученицам, с какими проблемами столкнулся ваш город, и как введение альтернативной валюты помогло их решить.
![Народ не верит в самоцветы](images/the.elf-3.png)

(На самом деле, всё было по–другому.
Звонит мне однажды Эльф целый день, звонит и звонит, а я трубку не беру.
Тогда он начинает слать кучи СМСок, типа: «Срочно перезвони!!!!!» и «Усатые скупают листву» и «Скидывай камни!!!!» и всё такое.
Тут мне и пришла в голову идея: если народ верит в листики, почему бы их не легализовать?)

После короткого периода паники, курс обмена начал стабилизироваться. Сейчас за один шелковичный листик дают пять болотных самоцветов.
Т.е. ситуация на валютном рынке выглядит так:

    samocvet = 1
    listik = 5

Конечно, для четвертой главы этот пример *совсем уж* детский, но это только начало. Мы присваиваем значения двум *переменным*.
**Знак равенства** — это операция *присваивания*, или *установки*.

После установки значения, переменная `listik` обрела смысл.
Теперь она представляет число `5`, т.е. пять голубых самоцветов.
И вот эта простая операция, мои дорогие, и есть **главный принцип Руби**!
Мы *создаём вещи*, и наделяем их *смыслом*. 
Присваивание переменных — это создание элементарных кирпичиков смысла.
Всё остальное — дело техники.

Ну а что касается Эльфа, ему жаловаться не приходится.
Он открыл самые первые в Гадюшнике пункты обмена валют, и прилично заработал.
(И хотя для нас он маленький гномик, для жителей Страны Болот — он страшный великан!)
![Лаборатория электронных имплантантов](images/the.elf-4.jpg)
Не–не–не–не–не–не! Не надо ей такое видеть. Она растроится, подумает, что это противоестественно, негуманно, грязно, извращённо и так далее, правда, птичечка?

### Давайте я сначала расскажу, чем они там занимаются, тем более, что торопиться нам некуда, ведь это же не фильм.

Давным–давно, ещё до ютьюба, была у меня моя собственная скаковая лошадь. Однажды во время скачек она споткнулась, перекувыркнулась раз десять и врезалась в грузчика с ящиком майонеза. Весь ипподром был залит смесью крови с майонезом.

Ветеринар сразу сказал — лошади хана, ходить не будет, лучше сразу усыпить. Все четыре ноги переломаны, не оставлять же безногую лошадь. Ну что она будет, сидеть всё время, или ездить на инвалидном кресле? Ветеринар клялся сердцем матери, что ничего нельзя сделать. Мнения разделились: большинство людей ему верили — всё–таки профессионал — но некоторые были слишком упертые и не хотели сдаваться. "Некоторых" было немного — я да Эльф Сколбасой.

И пока остальные закупали венки и медали на похороны моего коня, мы с Эльфом упорно рылись в интернете, и в конце концов нашли выход. Мы взяли живых раков и вживили их коню в культи. Получилось офигенно! У нас снова была лошадь, вернее, лошадинное тело на членистоногой платформе. Она прожила много счастливых лет, тихо ползая во влажной темноте пещер.

Через несколько лет, Эльф основал фирму "Продвинутое Животноводство". Теперь это ведущая в Стране Болот лаборатория по вживлению животным электронных и биологических имплантантов. Они делают новых зверей и разбирают старых на запчасти. Конечно, многое поменялось со времён той первой лошади. В начале, помню, заходит в лабораторию медведь — выходит медведь в тёмных очках. Полная фигня.

Но прошло несколько лет, и вот, заходит в лабораторию краб — выходит краб с собственным ракетным ранцем. Называется «Джеткраб», модель 2004–го года.

И хотя этот бизнес несовсем легальный, сегодня он процветает. Лаборатория в прекрасном состоянии, всё чистое, всё сияет.  У всех работников есть оружие, для обороны. Вдруг кто–то зайдёт без приглашения, например пожарная инспекция, или налоговая. А если закончатся пули, у них есть приказ — бить пистолетами по башке.

Ну что ж, я думаю теперь мы готовы к демонстрации. Показывайте, Эльф Амвросьич.
![Ловим звёздочку](images/the.elf-5a.jpg)

Перевожу на Руби:

       pipe.catch_star
    #    |      |
    #    |      |
    # труба.слови_звезду

Всё как обычно: переменная `pipe`, метод `catch_star`.
Кстати, мы, Рубисты, иногда говорим не «вызвать метод объекта А», а «послать сообщение объекту А».
Слева от точки — объект–получатель, справа — сообщение.
Т.е. мы как–бы шлём трубе приказ, в котором написано: «слови нам звёздочку».

В предыдущем примере (с листиками), мы *создавали вещи* и наделяли их *смыслом*.
В этом примере, мы заставляем вещи *действовать*. На этих двух принципах и строится весь Руби:

 1. Создаём вещи.
 2. Заставляем их действовать.

Идём дальше. Допустим, наша программа сработала, и труба подхватила падающую звёздочку. Куда она потом девается?

    star = pipe.catch_star

Как видишь, если на выходе из метода получается какой–то полезный результат, то его можно (но необязательно) положить в переменную.
В данном примере, если под трубу не подставить коробочку, то бедненькая звёздочка упадёт на пол и исчезнет.

(Спрашивается, зачем вызывать метод если тебе не нужен результат? Правильно, умный человек не станет так делать — переводняк!)
![Прикручиваем звёздочку к обезьяне](images/the.elf-5b.jpg)

Всё готово, не будем терять время:

    starmonkey = aggregate.attach( star, monkey )
    #               |        |       |      |
    #               |        |       |      |
    #            агрегат.прикрепи(звезда,обезьяна)

Объект `агрегат` получает сообщение `прикрепи`. Как он узнает, что к чему прикреплять?
— Это указано в *параметрах*: `star` и `monkey`.
На выходе получаем звездоликую обезьяну и сохраняем её в переменной `starmonkey`.
![Жаба](images/the.elf-5c.png)

Получается вот такая маленькая програмулечка, всего на две строчечки:

    star = pipe.catch_star
    starmonkey = aggregate.attach(star, monkey) + frog
    #                                              |
    #                                              |
    #                                            лягушка

Можно даже переписать в одну строчку:

    starmonkey = aggregate.attach( pipe.catch_star, monkey ) + frog

Видишь куда мы переставили `pipe.catch_star`?
Получается, мы подключили выход метода `catch_star` прямо на вход метода `attach`, без промежуточной переменной.
Теперь звёздочка выпадет из трубы прямо в агрегат. Сэкономили коробочку.




## 2. Никчемные, но волшебные

![Алё](images/blix-1.png)
Честно говоря, квартиры в «Пещерах Амбрэ» довольно хреновые.
Потолки низкие, лифт где–то метр в высоту.
Один чувак загрузил все сумки в лифт, а сам не влез, пришлось ему пешком бежать, пока сумки сами вверх ехали.
Но лестница оказалась настолько низкой, что он шишку набил в темноте. Дом–то в свое время для гномов строился.

А еще помню однажды, открываю кран, а воды нет.
С досады вырвалось из меня заклинание, мол мать его за ногу, даже умыться на ночь невозможно.
Вдруг чувствую, пошло что–то, тёплое и невидимое. На ощупь как вода, а руки сухие остаются.

Всё–таки волшебное это место — Пещеры Амбрэ. Никчемное, но волшебное. Прямо как «nil» в Руби… ;)


### Nil (пустота)

`nil` (от латинского «нигил», как в слове «нигилизм») — это специальное слово в Руби, обозначающее **пустоту**.
Просьба не путать `nil` и «ноль», потому что ноль это число, а `nil` это **совсем ничто**.

`nil` как зомби: в глазах темно, внутри пусто. Хоть он и ходит, но не может ни думать ни выучить что–нибудь новое.
Не смотря на это, `nil` — очень полезный и встречается много раз в каждой программе.
(Почему все любят скелетов? Потому они всегда улыбаются!)

Например, возьмём пустой пластиковый стаканчик:

    stakanchik = nil

Строго говоря, переменная `stakanchik` содержит какую–то фигню под названием «нил».
Но ведь «нил» значит «пустота», получается «стаканчик пустоты», то есть «пустой стаканчик».

Другое похожее понятие, знакомое тем читателям которые программируют на других языках, это «неопределённая переменная».
Это когда мы пытаемся прочитать значение переменной, которая никогда раньше не встречалась в программе, и получаем ошибку.
Строго говоря, «неопределённая переменная» просто не существует, и у неё нет и не может быть никакого значения — вот Руби и выдаёт ошибку.

В отличие от «неопределённой переменной», наш `stakanchik` очень даже существует, и у него есть совершенно определённое значение — **пустота**.

### False (ложь)

![Силуэт кота](images/blix-neg.gif) 

_А теперь, обратите внимание направо. Это наш кот Чёрный Негыр (фотография сделана ночью со вспышкой).
Усы как свеженаглаженые стрелочки, глаза спокойные как озеро, хвост как дым из трубы._

А теперь, обрати внимание на *темноту* вокруг Негыра. Знаешь, в искусстве есть такое понятие: «негативное пространство»?
Мне нравится это выражение. Оно хорошо передаёт ощущение отрицания; в пустоте как–бы чувствуется какой–то негатив.
Так и в `nil`е чувствуется что–то негативное, словно какая–то грустная нотка прорывается сквозь его весёлую песенку.

Всё остальное в Руби насквозь пропитано позитивом. Кажется, Руби родился из какой–то очень хорошей мысли, и она проходит через все объекты, строчки, и регэкспы.
И только две вещи мрачно поглядывают из под тёмных капюшонов: `nil` и `false`.

Специально чтобы отличать позитив от негатива, в Руби есть оператор `if` («если»).
Пишется он примерно как распространённая форма блока `do`/`end` из предыдущей главы, в том смысле что в конце тоже ставится `end`:

    if stakanchik
        print "Раз мы сюда попали, значит в стаканчике есть что–то хорошее."
    end

Если в `stakanchik`е находится `nil` или `false`, программа перепрыгнет на `end` и на экране ничего не напишется.
Оператор `if` не любит негативщиков, и не будет запускать для них свой кусок программы.

Мои бедненькие `nil` и `false`, не надо расстраиваться. Специально для вас есть другой оператор — `unless` (переводится примерно как «если не», или «разве что»)
Он, конечно, не такой гламурный как `if`, зато он нормально относится к таким как вы.
Скажем больше — он обслуживает *только* негативных клиентов! Которых всего два: `nil` и `false`.

    unless stakanchik
        print "Раз мы сюда попали, значит в стаканчике ничего хорошего нет."
    end

Если кусок кода, который надо запустить или пропустить в зависимости от содержимого переменной, влазит на одну строчку,
то бывает красивее использовать сокращённый вариант операторов `if` и `unless`:

    print "Кажется в стаканчике что–то есть." if stakanchik
    print "Неа, нифига нету." unless stakanchik

А ещё, их можно скомбинировать, чтобы сделать что–то только если «правда что А и неправда что Б»:

    print "В бокале пусто, пьём из стаканчика" if stakanchik unless bokal

Иногда такая комбинация читается более естественно и больше подходит по смыслу чем другие варианты.

Ну вот, с ложью (англ. «false») разобрались, теперь переходим сами знаете к чему.
