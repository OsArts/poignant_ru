% Душевный Учебник по Руби — Глава 3
% Why the lucky stiff; Andrei Volkov (translator)

Глава 3. Экспресс-тур по Руби (с мультяшными лисичками)
=======================================================
![o](images/chapter.poignant.guide-3.jpg)\ 




![Лисичек в студию!](images/the.foxes-1.png)\ 

Как я и обещал, вот они, наши лисички (вообще–то, они мальчики).
Ой черт, астма подступила, ща лекарственного газика пыхну и вернусь. Подожди буквально секундочку.

![Лисик, братик, полезай в квадратик](images/the.foxes-2.png)\ 

Мне тут сказали, что с *этой* главой надо полотенце в книгу вкладывать ;)
Чтобы лицо вытирать от пота.
Да уж действительно, нам с тобой предстоит экспресс-тур — весь язык в одной главе!
Прямо не чтение, а соревнование по скоростному зажиганию спичек — весь коробок по одной спичке, с максимальной скоростью!




## 1. Язык удобный для людей


![Лисы понимают всю серьезность ситуации](images/the.foxes-3.png)\ 

Некоторые люди говорят не «язык програмирования», а «компьютерный язык».
Получается как будто язык удобный для компьютеров, и совершенной чужой для людей.
Как будто мы какие–то иностранцы, и нам нужна виза и переводчик.

Вот я бы никогда не сказал «учу новый компьютерный язык — Руби», у меня бы просто язык не повернулся :))
Потому что Руби, в отличие от других *языков программирования* — это язык на котором можно думать, использовать его родные слова и выражения сразу, без перевода с человеского!
Потому что Руби специально придуман чтобы программистам было удобно, даже если компьютеру прийдётся немного поднапрячься.
Какой–же это тогда компьютерный язык? Это получается наш, человеческий язык. Язык удобный для людей.


### Прочитай вслух:

      5.times { print "ведмедик" }
    #     │       │
    #     │       │
    #  5.раз  напечатать

(*примечание переводчика: русские слова снизу, и линии соединяющие их с английскими, это конечно не часть программы. Это я добавил, чтобы легче читать было*)

Как всегда, знаки препинания влух не читаются, они только помогают нам понять смысл предложения.
Получается «пять раз напечатать ведмедик» — суперпросто и понятно.
Вот такая маленькая, но настоящая, програмка пять раз печатает на экране смешное украинское слово «ведмедик» («мишка»).

### Прочитай вслух:

      exit unless "мишутка".include? "шутка"
    #   │     │                         │
    #   │     │                         │
    # выйти если–не–правда–что       содержит

Здесь мы делаем проверку, просто на всякий случай. Наша программа **выйдет**, **если не правда, что** слово «мишутка» **содержит** в себе слово «шутка».
Кстати, обрати внимание, как в Руби используются вопросительные знаки: сразу понятно, что мы задаем вопрос — содержит или нет?


### Прочитай вслух:

    ['хлеб', 'сыр', 'колбаса'].each { |word| print word.capitalize  }
    #                            │       │      │             │
    #                            │       │      │             │
    #                          каждое  слово напечатать  с большой буквы

Это уже немного сложнее, но все ещё можно прочесть.
Руби читается в сто раз легче других языков программирования, особенно если знать основные английские слова.
Получается примерно так: «Взять хлеб, сыр, колбасу, и каждое слово напечатать с большой буквы».
Комп послушно отвечает:

~~~~~~~~~~~~
Хлеб
Сыр
Колбаса
~~~~~~~~~~~~

Тут ты, наверное, думаешь: «Читать–то это можно, но как *писать*? Ведь это надо знать в каком порядке все эти слова ставить, что означают точки, чем отличаются квадратные скобки от фигурных и т.д.»
Скоро, птичечка, мы и до этого дойдем, но сначала нам надо выучить **части речи**.

Итак, что мы пока выучили?
Программа на Руби состоит из предложений (конечно не обычных английских предложений, но типа того).
Каждое предложение состоит из слов и знаков препинания и выражает одну мысль.
Из этих предложений можно составить повесть, расказ, роман — то есть программу.
Эту программу может запросто прочесть не только компьютер, но и другой человек.




## 2. Части речи


Как отличить лису от невесты? Очень просто: у лисы — рыжий хвост, а у невесты — белая фата. 
Так и в Руби, разные части речи можно легко распознать по особым признакам — 
у одних в начале всегда стоит точка, другие всегда окружены скобками, 
третьи всегда начинаются с большой буквы. 
Ты только взглянешь на программу и сразу скажешь: «Ага, знакомая рожа! Ты то мне и нужен!». 
Названия тоже надо запомнить, чтобы было о чем говорить с другими Рубистами.

Чисто чтобы помочь тебе запомнить названия, я в двух словах объясню, 
для чего нужна каждая часть речи, но тебе это понимать не надо. 
Главное, постарайся запомнить, как они выглядят. Как они работают, мы потом разберемся, у нас ещё вся книга впереди. 
Сейчас нам нужно, чтобы к концу главы ты могла посмотреть на кусок Руби и опознать каждую часть речи.


### Переменные

Если ты видишь **обычное слово, с маленькой буквы**, безо всяких опознавательных знаков — это скорее всего переменная. 
Кроме маленьких букв, в них встречаются цифры и знаки подчеркивания. Например:

    x
    y
    banana2
    nado_pozvonit_mame

Переменные, это как клички. Помнишь свою детскую кличку? 
Меня, например, называли «профессор Мавродаки», и когда кто–то говорил 
«Эй, профессор Мавродаки, иди сюда», все волшебным образом знали: профессор Мавродаки — это значит я.

Вот так и с переменными, если какая–то штука часто встречается в программе, бывает удобно дать ей кличку. 
Например, представь что ты работаешь в детском доме. 
И когда кто–то приходит усыновлять ребенка, но у него не хватает какой–нибудь справки, 
то он должен заплатить *сто двадцать один доллар и восемь центов* «за плюшевого мишку». 
(Нельзя же разлучать ребенка с любимой игрушкой, у него и так шок!)

И вот ты вводишь все платежи в бухгалтерскую программу (а она, понарошку, написана на Руби):

    dved = 121.08
    gos_poshlina = 4.22
    notarius = 50.00
    itogo = gos_poshlina + notarius + medved

Как видишь, переменные очень помогают. А детскому дому любая помощь пригодится!
![Лисы прикалываются над моими примерами](images/the.foxes-4a.png)\ 


### Числа

Число узнать легче всего, это просто **последовательность цифр**:

    23

В начале числа может стоять **минус**:

    -10000

Иногда очень большие числа разделяют на группы по три разряда (тысячи, миллионы, и т.д.). В Руби для этого используется знак подчёркивания:

    naselenie = 12_000_000_000

Для отделения дробной части от целой используют точку:

    3.14
    -808.08


### Строчки

Строчка, это просто любая надпись **в кавычках**. 
Внутри могут быть русские и латинские буквы, цифры, знаки препинания, в общем любые символы. 
Можно использовать и двойные кавычки, и одинарные:

    "laboratorka"
    '2021'
    "Прикольные картинки!!!"

Кавычки как–бы соединяют все эти слова в одну цепочку, чтобы их можно было записать и достать все сразу. 
Это легче всего объяснить на примере. 
Одному журналисту дали задание: взять интервью у знаменитой певицы, например у Аврил Лавин. 
И вот он записывает примерно такой бред:

    avril_skazala = "Я стала намного мудрее. Теперь я знаю как устроен шоу–
    бизнес — что нужно делать и как это организовать."

Помнишь, как мы записывали сумму взятки в переменную `medved`? 
Точно также, теперь мы записали строчку текста в переменную `avril_skazala`. 
И вот, готовый макет газеты идет в типографию, а в ней, понарошку, печатные станки работают на Руби:

      print opra_skazala
      print avril_skazala
      print obama_skazal
    #   │
    #   │
    # печатать

![Лисы хотят попасть ко мне в пример](images/the.foxes-4b.png)\ 


### Символы

Символы всегда начинаются с **двоеточия**. 
После двоеточия могут идти буквы, цифры или подчёркивания — так же как в названиях переменных:

    :a
    :b
    :ponce_de_leon

В основном, символы используются для передачи *сигналов* между разными местами программы 
(в других языках для этого используются строчки и «енумы»).

Если по простому, компьютеру легче переваривать символы чем строчки. 
Короче, символы — это как сода от изжоги. Двоеточие — это бульбочки у компьютера в желудке. Ням-ням! О–о–о–о, попустило!

![Буханка сала!!!](images/the.foxes-4c.png)\ 


### Константы

Константы всегда начинаются **с большой буквы**. В остальном они выглядят точно как переменные:

    Time
    Array
    Y_popa_bila_sobaka

Если обычная переменная это кличка, то константа — это *имя собственное*.
Имя собственное всегда пишется с большой буквы. Например, Крещатик — это имя собственное.
Крещатик нельзя ни переименовать, ни перенести в другое место.
Имя собственное используется для называния конкретного, вполне определённого предмета, и почти никогда не меняется.

Также и константа — её значение определяется в программе в одном месте, и нигде не меняется.

    Main_street_of_Kiev = "Крещатик"

Если мы попробуем назначить константу второй раз, Руби будет ругаться. Негодное это дело — переименовывать улицы.

![Ну давай, буханка сала.](images/the.foxes-4d.png)\ 


### Методы

Если считать, что в Руби переменные и константы играют роль существительных, то методы соответствуют глаголам.
Методы легко опознаются по **точке**, с помощью которой они прилепляются к переменной или константе.
Мы их уже встречали, в примерах на чтение вслух.

       door.open
    #   │     │
    #   │     │
    # дверь открыть

В этом примере, `door` это переменная, а `open` — это метод, т.е. некое действие. 
Некоторые методы можно ставить подряд, один за другим:

    door.open.close
    #           │
    #           │
    #        закрыть

Получается, мы попросили компьютер открыть дверь, и сразу же закрыть. Ещё один пример:

    door.is_open?
    #      │
    #      │
    #   открыта?

`is_open?` — это тоже действие, мы просим компьютер проверить, открыта ли дверь. 
Можно было бы его так и назвать — `test_to_see_if_it_is_open`, но `is_open?` даже лучше — коротко и ясно.
Кстати, в названиях методов можно ставить не только знаки вопроса, но и восклицательные знаки!


### Методы с параметрами

Некоторым методам нужно задавать *параметры*, например, если метод красит двери — надо указать цвет краски.
Параметры ставятся после имени метода, **через запятую, обычно в скобках**.

    door.paint( 3, :red )
    #      │         │
    #      │         │
    #  покрасить   красный

Ну вот, мы покрасили дверь в красный цвет, в три слоя.

Понарошку, переменная `door` — это моторная лодка, а сзади к лодке привязана камера от колеса, на которой сидят дети.
Скобки — это сама камера, параметры в скобках — это дети, а запятые — это их ноги.
Последний ребенок поджал ноги, чтобы не торчали.

Можно даже составить целый поезд из камер:

    door.paint( 3, :red ).dry( 30 ).close()
    #                      │          │
    #                      │          │
    #                   посушить    закрыть

Получается такая программа: покрасить дверь в три слоя красной краски, дать высохнуть 30 минут, а потом закрыть.
Хотя у последнего метода нет параметров, можно поставить скобки, но обычно они не ставятся — нафига тащить пустую камеру?

Есть ещё такая штука: «ядерные методы», например `print`. Для удобства, ядерные методы можно вызывать без точки:

    print "Не надо нам никаких точек."


### Классные методы

Как и обычные методы, классные методы приклеиваются к переменным и константам, 
только вместо точки, они приклеиваются **двумя двоеточиями**:

    Door::new( :oak )
    #      │     │ 
    #      │     │
    #    новая дубовая

Самый полезный из всех классных методов — это метод `new`, он создаёт *новые* вещи. 
В этом примере мы используем его чтобы сделать новую дубовую дверь. 
Конечно, чтобы *на самом деле* сделать дверь, нужно заложить в Руби кучу знаний о дверях, столярных инструментах, древесине, лесорубах и этих, как их, *двуручных пилах*, которые делают такой прикольный звук когда гнутся.

![Многочисленные буханки сала](images/the.foxes-4e.png)\ 


### Глобальные переменные

Глобальные переменные всегда начинаются **с доллара**:

    $x = "буханка"
    $y = "сала"

Обычные переменные сидят в своих частях программы, как в домиках. 
В одном домике «папа» значит продавец, в другом — укротитель тигров. 
В каждом доме слово «папа» имеет свой смысл.

Но глобальные переменные всегда одни и те же, во всех домиках. 
Поэтому они и начинаются с доллара, ведь доллары в каждом доме уважают.
Можно постучаться в любую дверь и дать денег — и все обрадуются, а вот если сказать «вам случайно укротитель тигров не нужен?» — то могут и не понять.

Если короче, глобальные переменные можно назначить в одном месте программы, а потом прочитать в любом другом месте.


### Переменные–атрибуты

Переменные–атрибуты всегда начинаются **со знака @** (читается «ат», от слова «атрибут»):

    @z = "Самая огромная буханка сала в мире"

В переменные–атрибуты обычно записывают характеристики объектов. Например, если есть объект «дверь», его ширину можно записать в переменную `@width`.


### Классные переменные–атрибуты

Классные переменные–атрибуты всегда начинаются **с двойного @@**:

    @@ladno = "Ладно, давайте сюда вашу буханку сала"

Как и обычные переменные–атрибуты, классные переменные–атрибуты используются для хранения характеристик, только не одного объекта, а сразу многих.
Если в атрибут `@width` мы записывали ширину конкретной двери, то в классный атрибут `@@width` мы запишем стандартную ширину всех стандартных дверей.

![Получилось!](images/the.foxes-4f.png)\ 


### Блоки

Блок — это кусок программы **между двумя фигурными скобками**:

    2.times { print "Я, конечно, написал пример про буханку сала, 
    но это был первый и последний раз!" }

Блок позволяет взять кусок логики, и передать его из одной части программы в другую.
Фигурные скобки похожи на щипцы; они схватили кусок программы и не отпускают.

А ещё, блок похож на маленький красивый пенальчик с карандашами и резинками, с прозрачной крышечкой, сквозь которую видно, что внутри.
Хотя пенальчики, пожалуй, красивее чем блоки…

Если блок получается на несколько строк, вместо фигурных скобок пишут `do` (делать) и `end` (конец):

    loop do
       print "О–о–о!"
       print "Это ж гораздо лучше!"
       print "А то от этих щипцов у меня уже спина начинала болеть."
    end


### Блоки с параметрами

Если блоку нужны параметры, их пишут **между двумя знаками «|»**, через запятую:

    { |x,y| x + y }

Тут `x,y` — это параметры; после них идет кусок логики `x + y`, который считает их сумму.

Знаки «|», это как–бы два края детской горки, с которой едут параметры: `x` едет, растопырив руки и ноги, а скромная `y` — только руки.
Параметры приходят сверху, садятся, и катятся прямо в блок!

![Расстроились!](images/the.foxes-4g.png)\ 


### Отрезки

Отрезок выглядит так: **первый элемент, две точки, последний элемент — и всё это в скобках**:

    (1..5)     # в этот отрезок входят числа 1, 2, 3, 4 и 5.
    ('a'..'z') # этот отрезок содержит весь латинский алфавит, от «a» до «z».

Мне отрезки напоминают сложенную гармошку: скобки это ручки, а две точки — это застежка.
(Конечно, если всё время ходить с растянутой гармошкой, можно нереально натренировать самооценку,
но иногда бывает полезно посомневаться в себе, и не выставлять свою «гармошку» нараспашку.)

Обычно отрезки пишутся с двумя точками, но ещё бывают с тремя — третья точка означает, что правый край отрезка не включается:

    (0...5)    # этот отрезок включает в себя числа 0, 1, 2, 3 и 4.

Мы как бы немного приоткрыли гармошку, и она выпустила звук. 
Эта сбежавшая нотка и есть последний элемент отрезка. Наш подарок небесам.


### Массивы

Массив, это **список элементов в квадратных скобках**, через запятую:

    [3, 1, 3, 2]    # массив чисел
    ['куртка', 'варежки', 'сноуборд']   # массив строчек

Массив похож на гусеницу при–стэпленную к программе. 
Каждый элемент — это секция брюшка, запятые — это ножки шевелятся, а квадратные скобки — это скрепки, чтобы она не убежала.

Жила–была одна гусеница, вместо ног у неё были запятые. 
Запятая — значит пауза, поэтому ей приходилось останавливаться после каждого шага. 
Остальные гусеницы её очень уважали, думали она взвешивает каждый шаг. 
В итоге она стала бизнес–леди, но не забыла нуждающихся, жертвовала им листики с дырочками.

Кстати, элементы массива не просто валяются в куче как попало, а всегда стоят один за другим, как их вначале поставили.


### Хэши

Хэш — это список пар «слово — значение», **в фигурных скобках**.
В каждой паре «слово» и «значение» разделены **псевдо–стрелочкой, составленной из знаков «равно» и «больше»**:

    {'мишка' => 'ведмедик', 'Кощей Бессмертный' => 'Кащик Невмерущий'}

На этот раз, фигурные скобки, это, понарошку, маленькие словарики — видишь, как–бы маленькие раскрытые книжечки?
На каждой страничке словаря — только одно слово и его перевод, а запятые, это понарошку уголки страниц:

    {
      'имя' => 'Петр Иваныч',
      'профессия' => 'укротитель тигров',
      'любимый музыкальный инструмент' => 'гармошка'
    }

Как видишь, в хэшах можно хранить не только словарные данные, а вообще любые пары значений.
Что бы их было легче найти, они хранятся не по порядку списка, как в массиве, а по ключевым словам, как в словаре.

![Лисам надоело сидеть в комиксе](images/the.foxes-5.png)\ 


### Регулярные выражения

Регулярное выражение (сокращенно «рег–эксп») — это набор букв и хитрых кодов **в косых скобках**:

    /руби/
    /[0-9]+/
    /^\d{3}-\d{3}-\d{4}/

Регулярные выражения нужны, чтобы сканировать тексты на наличие слов и более сложных комбинаций символов.

Косые скобки — это как–бы две булавочки; посередине на полупрозрачном экранчике написана искомая комбинация букв.
Держась за булавочки, ты водишь этой конструкцией над книгой, строчка за строчкой.
Если комбинация букв на экранчике совпадает со словом в книге — экранчик начинает мигать.
Тогда ты прикладываешь экранчик прямо к странице, и он подсвечивает найденное слово мягким желтым светом.
Но когда булавки касаются поверхности бумаги, книге становится щекотно, и она чихает: «рег–эксп!»

Конечно, регулярные выражения работают намного быстрее, чем рука с волшебным экранчиком.
С помощью рег–экспов можно легко и просто сканировать целые тома книг!


### Операции

Вот список математических операций, логических операций и операций сравнения, имеющихся в языке Руби.
Самые главные ты уже знаешь — сложение, вычитание, больше, меньше и так далее.
Просмотри их наискосок:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
** !  ~  *  /  %  +  -  &
<< >> |  ^  >  >= <  <= <=>
|| != =~ !~ && += -= == ===
.. ... not and or
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


### Ключевые слова

Некоторые слова в Руби наделены особым смыслом, поэтому их нельзя использовать как попало, например называть ими переменные и т. д.
Штук пять из них ты уже встречала.
Они, как говорится, охраняются законом. Только попробуй тронуть — и сразу получишь официальную синтаксическую ошибку!

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
alias   and     BEGIN   begin   break   case    class   def     defined
do      else    elsif   END     end     ensure  false   for     if
in      module  next    nil     not     or      redo    rescue  retry
return  self    super   then    true    undef   unless  until   when
while   yield
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


### Вроде всё!

Вот такие они, уважаемые члены языка Руби. Из них мы с тобой и будем лепить наши хитрые, но душевные, программы на протяжении следующих трех глав.
Рекомендую отлистать назад и бегло просмотреть весь список — сейчас я буду проверять, насколько хорошо ты их запомнила.

![Разговоры за кулисами](images/the.foxes-6.png)\ 


## 3. Говоришь, хватит с тобой сюсюкаться?

Ты — молодец! Просто умница!!!
Я всем про тебя рассказываю, есть мол у меня одна читательница, не знаю откуда и как зовут, но она такая умница — читает и кликает, и читает и кликает…
«Молодежь» — говорю — «эх, новое поколение» — говорю —  «душевные люди! Я бы никогда… ы–ы–ы…» — мне даже слов не хватает!

У меня даже сердце так горит, что аж сквозь кожу просвечивает красным пятном. 
Прийдется вызывать скорую, чтобы вкололи мне 10 кубиков джаваскрипта, подругому я не успокоюсь.

Ага, ага. Вообщем, классно. Но теперь мне прийдется стать строгим и даже жестоким учителем, а тебе прийдется поднапрячься.
Теперь, птичечка, тебе прийдется не только водить глазами туда–сюда (да–да–да, конечно я помню, как ты прекрасно читала вслух!), тебе прийдется еще и *понимать написанное*.


### Разбери по частям речи:

    5.times { print "ведмедик" }

Только, чур, не подглядывать в ответы! Закрой рукой этот параграф и подумай сама.
Сначала идет *число* `5`, потом *метод* `.times`, правильно? Дальше, первые щипцы — это начало *блока*.
Дальше, *ядерный метод* `print`, который можно вызывать без точки, и его *параметр* — *строчка* `"ведмедик"`. 
Заканчивается всё щипцами, закрывающими *блок*.


### Разбери по частям речи:

    exit unless "мишутка".include? "шутка"

В начале `exit`, как и `print` в прошлом примере, это тоже *ядерный метод*.
За ним `unless` — это *ключевое слово*, если ты внимательно читала список ключевых слов, ты его узнаешь.
Дальше `"мишутка"` — это *строчка*, к ней прилеплен *метод* `include?` и в конце снова *строчка* — `"шутка"`.


### Разбери по частям речи:

    ['хлеб', 'сыр', 'колбаса'].each { |word| print word.capitalize  }

Гусеница с бутербродом в животе — это *массив*, в нём три *строчки*: `'хлеб'`, `'сыр'` и `'колбаса'`.
Сразу после массива идёт *метод* `each`, а после него — *блок*.

Внутри блока, *параметр* `word`, едет с горки прямо в блок и становится *переменной*.
Дальше, *ядерный метод* `print` с *параметром* `word.capitalize`, состоящим из *переменной* `word` и *метода* `capitalize`.

