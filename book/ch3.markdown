% Душевный Учебник по Руби — Глава 3
% Why the lucky stiff; Andrei Volkov (translator)

Глава 3. Экспресс-тур по Руби (с мультяшными лисичками)
=======================================================
![o](images/chapter.poignant.guide-3.jpg)\ 




![Лисичек в студию!](images/the.foxes-1.png)\ 

Как я и обещал, вот они, наши лисички.
Ой черт, астма подступила, ща лекарственного газика пыхну и вернусь. Подожди буквально секундочку.

![Лисик, братик, полезай в квадратик](images/the.foxes-2.png)\ 

Мне тут сказали, что с *этой* главой надо полотенце в книгу вкладывать ;)
Чтобы лицо вытирать от пота.
Да уж действительно, нам с тобой предстоит экспресс-тур — весь язык в одной главе!
Прямо не чтение, а соревнование по скоростному зажиганию спичек — весь коробок по одной спичке, с максимальной скоростью!




## 1. Язык удобный для людей


![Лисы понимают всю серьезность ситуации](images/the.foxes-3.png)\ 

Некоторые люди говорят не «язык програмирования», а «компьютерный язык».
Получается как будто язык удобный для компьютеров, и совершенной чужой для людей.
Как будто мы какие–то иностранцы, и нам нужна виза и переводчик.

Вот я бы никогда не сказал «учу новый компьютерный язык — Руби», у меня бы просто язык не повернулся :))
Потому что Руби, в отличие от других *языков программирования* — это язык на котором можно думать, использовать его родные слова и выражения сразу, без перевода с человеского!
Потому что Руби специально придуман чтобы программистам было удобно, даже если компьютеру прийдется немного поднапрячься.
Какой–же это тогда компьютерный язык? Это получается наш, человеческий язык. Язык удобный для людей.

### Прочитай вслух:

    5.times { print "ведмедик" }
        │       │
        │       │
     5.раз  напечатать

(*примечание переводчика: русские слова снизу, и линии соединяющие их с английскими, это конечно не часть программы. Это я добавил, чтобы легче читать было*)

Как всегда, знаки препинания влух не читаются, они только помогают нам понять смысл предложения.
Получается «пять раз напечатать ведмедик» — суперпросто и понятно.
Вот такая маленькая, но настоящая, програмка пять раз печатает на экране слово «ведмедик» (это как «медведик», только по–украински).

### Прочитай вслух:

    print "ведмедик" if "местная столовая".include? "борщ"
      │               │                       │
      │               │                       │
    напечатать       если                   имеет

Тут мы добавили проверку; наша программа напечатает «ведмедик» только **если** «местная столовая» **имеет** «борщ».
А так как словосочетание «местная столовая» не содержит в себе слово «борщ», то программа ничего не напечатает, а просто молча закончит выполнение.
Кстати, обрати внимание, как в Руби используются вопросительные знаки: сразу понятно, что мы задаем вопрос — имеется ли борщ?

### Прочитай вслух:

    ['хлеб', 'сыр', 'колбаса'].each { |word| print word.capitalize  }
                                 │       │      │             │
                                 │       │      │             │
                               каждое  слово напечатать  с большой буквы

Это уже немного сложнее, но все еще можно прочесть.
Руби читается в сто раз легче других языков программирования, особенно если знать основные английские слова.
Получается примерно так: «Взять хлеб, сыр, колбасу, и каждое слово напечатать с большой буквы».
Комп послушно отвечает:

    Хлеб
    Сыр
    Колбаса

Тут ты, наверное, думаешь: «Читать–то это можно, но как *писать*? Ведь это надо знать в каком порядке все эти слова ставить, что означают точки, чем отличаются квадратные скобки от фигурных и т.д.»
Скоро, птичечка, мы и до этого дойдем, но сначала нам надо выучить **части речи**.

Итак, что мы пока выучили?
Программа на Руби состоит из предложений (конечно не обычных английских предложений, но типа того).
Каждое предложение состоит из слов и знаков препинания и выражает одну мысль.
Из этих предложений можно составить повесть, расказ, роман — то есть программу.
Эту программу может запросто прочесть не только компьютер, но и другой человек.




## 2. Части речи


Как отличить лису от невесты? Очень просто: у лисы — рыжий хвост, а у невесты — белая фата. 
Так и в Руби, разные части речи можно легко распознать по особым признакам — 
у одних в начале всегда стоит точка, другие всегда окружены скобками, 
третьи всегда начинаются с большой буквы. 
Ты только взглянешь на программу и сразу скажешь: «Ага, знакомая рожа! Ты то мне и нужен!». 
Названия тоже надо запомнить, чтобы было о чем говорить с другими Рубистами.

Чисто чтобы помочь тебе запомнить названия, я в двух словах объясню, 
для чего нужна каждая часть речи, но тебе это понимать не надо. 
Главное, постарайся запомнить, как они выглядят. Как они работают, мы потом разберемся, у нас еще вся книга впереди. 
Сейчас нам нужно, чтобы к концу главы ты могла посмотреть на кусок Руби и опознать каждую часть речи.

### Переменные

Если ты видишь обычное слово, с маленькой буквы, безо всяких опознавательных знаков — это скорее всего **переменная**. 
Кроме маленьких букв, в них встречаются цифры и знаки подчеркивания. Например:

    x
    y
    banana2
    nado_pozvonit_mame

Переменные, это как клички. Помнишь свою детскую кличку? 
Меня, например, называли «профессор Маврадаки», и когда кто–то говорил 
«Эй, профессор Маврадаки, иди сюда», все волшебным образом знали: профессор Маврадаки — это значит я.

Вот так и с переменными, если какая–то штука часто встречается в программе, бывает удобно дать ей кличку. 
Например, представь что ты работаешь в детском доме. 
И когда кто–то приходит усыновлять ребенка, но у него не хватает какой–нибудь справки, 
то он должен заплатить *сто двадцать один доллар и восемь центов* «за плюшевого медведика». 
(Нельзя же разлучать ребенка с любимой игрушкой, у него и так шок!)

И вот ты вводишь все платежи в бухгалтерскую программу (а она, понарошку, написана на Руби):

    medvedik = 121.08
    gos_poshlina = 4.22
    notarius = 50.00
    itogo = gos_poshlina + notarius + medvedik

Как видишь, переменные очень помогают. А детскому дому любая помощь пригодится!
![Лисы прикалываются над моими примерами](images/the.foxes-4a.png)\ 




### Числа


Число узнать легче всего, это просто **последовательность цифр**:

    1
    23

В начале числа может стоять **минус**:

    -10000

Иногда очень большие числа разделяют на группы по три разряда (тысячи, миллионы, и т.д.). В Руби для этого используется знак подчеркивания:

    naselenie = 12_000_000_000

Для отделения дробной части от целой используют точку:

    3.14
    -808.08

### Строчки

Строчка, это просто любая надпись **в кавычках**. Внутри могут быть русские и латинские буквы, цифры, знаки препинания, в общем любые символы. Можно использовать и двойные кавычки, и одинарные:

    "laboratorka"
    '2021'
    "Прикольные картинки!!!"

Кавычки как–бы соединяют все эти слова в одну цепочку, чтобы их можно было записать и достать все сразу. 
Это легче всего объяснить на примере. 
Одному журналисту дали задание: взять интервью у знаменитой певицы, например у Аврил Лавин. 
И вот он записывает примерно такой бред:

    avril_skazala = "Я стала намного мудрее. Теперь я знаю как устроен шоу–бизнес — 
                     что нужно делать и как это организовать."

Помнишь, как мы записывали сумму взятки в переменную **medvedik**? 
Точно также, теперь мы записали строчку текста в переменную **avril_skazala**. 
И вот, готовый макет газеты идет в типографию, а в ней, понарошку, печатные станки работают на Руби:

    print opra_skazala
    print avril_skazala
    print obama_skazal
      │
      │
    печатать

![Лисы хотят попасть ко мне в пример](images/the.foxes-4b.png)\ 

### Символы

Символы всегда начинаются с **двоеточия**. После двоеточия могут идти буквы, цифры или подчеркивания — так же как в названиях переменных:

    :a
    :b
    :ponce_de_leon

В основном, символы используются для передачи *сигналов* между разными местами программы (в других языках для этого используются обычные строчки).

Если по простому, компьютеру легче переваривать символы чем строчки. Короче, символы — это как сода от изжоги. Двоеточие — это бульбочки у компьютера в желудке. Ням-ням! О–о–о–о, попустило!

![Буханка сала!!!](images/the.foxes-4c.png)\ 

### Константы

Константы всегда начинаются **с большой буквы**. В остальном они выглядят точно как переменные:

    Time
    Array
    Y_popa_bila_sobaka

Если обычная переменная это кличка, то константа — это *имя собственное*.
Имя собственное всегда пишется с большой буквы. Например, Крещатик.
Крещатик нельзя ни переименовать, ни перенести в другое место.
Имя собственное используется для называния конкретного, вполне определённого предмета, и обычно никогда не меняется.

Также и константа — ее значение определяется в программе в одном месте, и нигде не меняется.

    Main_street_of_Kiev = "Крещатик"

Если мы попробуем назначить константу второй раз, Руби будет матюкаться. Негодное это дело — переименовывать улицы.

![Ну давай, буханка сала.](images/the.foxes-4d.png)\


